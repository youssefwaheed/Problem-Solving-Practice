#define fast std::ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> iv;
typedef vector<ll> llv;
#define el "\n"
#define all(x) (x).begin(),(x).end()
#define sz(s) (int)(s).size()
const int N = (int)2e5+5;
int bits[200005][20];
void solve() {
   int l ,r;
   cin>>l>>r;
   int ans = 1e9;
   //now we want the min column that have zero from l to r
   //all numbers form l to r is (r - l + 1) 
   //all ones form l to r is bits[r][i] - bits[l-1][i]
    for (int i = 0; i < 20; ++i) {
        ans = min(ans,r - l + 1 - bits[r][i] + bits[l-1][i]);
    }
    cout<<ans<<el;
}
void preprocess(){
    //to get the set bit for every number if this bit in this number is not 0 make it 1
    for (int i = 0; i < 200005 ; ++i) {
        for (int j = 0; j < 20 ; ++j) {
            bits[i][j] = ((i & (1<<j)) != 0);
        }
    }
    //prefix sum to sum all the bits in every level for all numbers
    for (int i = 1; i < 200005 ; ++i) {
        for (int j = 0; j < 20 ; ++j) {
            bits[i][j]+= bits[i-1][j];
        }
    }
}
int main() {
    fast;
    preprocess();
    int t = 1;
    cin >> t;
    while (t--)
        solve();
    return 0;
}
