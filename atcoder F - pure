    #define fast std::ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
    #include<bits/stdc++.h>
    using namespace std;
    typedef long long ll;
    typedef vector<int> iv;
    typedef vector<ll> llv;
    #define el "\n"
    #define all(x) (x).begin(),(x).end()
    #define sz(s) (int)(s).size()
    const int N = 201;
    const int mod = 1000000007;
    /********************************************************************/
    iv st,cycle;
    void dfs(int node,vector<vector<int>> &adj,iv &vis,iv &valid){
        vis[node] = 1;
        st.push_back(node);
        for (int i : adj[node]) {
            if(!valid[i])
                continue;
            if(vis[i] == 0)dfs(i,adj,vis,valid);
            else if(vis[i] == 1 && cycle.empty()){
                for (int j = sz(st)-1; j >= 0 ; --j) {
                    cycle.emplace_back(st[j]);
                    if (st[j] == i) break;
                }
            }
        }
        vis[node] = 2;
        st.pop_back();
    }
    void solve(){
        int n,m;
        cin>>n>>m;
        vector<vector<int>> adj(n+1);
        iv vis(n+1,0),valid(n+1,1);
        for (int i = 0; i < m; ++i) {
            int u,v; cin>>u>>v;
            adj[u].push_back(v);
        }
        for (int i = 1; i <= n ; ++i)
            if(vis[i] == 0)dfs(i,adj,vis,valid);
    
        if(cycle.empty()){
            cout<<-1<<el;
            return;
        }
    
        iv nxt(n+1,-1);
        for (int i = 0; i < sz(cycle); ++i) {
            nxt[cycle[(i+1) % sz(cycle)]] = cycle[i];
        }
        while (true){
            int src = -1,des = -1;
            for (int i : cycle) {
                for (int j : adj[i]) {
                    if(nxt[j] != -1 && nxt[i] != j){
                        src = i,des = j;
                        break;
                    }
                }
                if(src != -1)break;
            }
            if(src == -1){
                cout<<cycle.size()<<el;
                for (int i = sz(cycle)-1; i >= 0 ; --i) {
                    cout<<cycle[i]<<el;
                }
                return;
            }
            fill(all(vis),0);
            fill(all(valid),0);
            for (int i : cycle) valid[i] = 1;
            cycle.clear();
            vis[src] = 1;
            st.push_back(src);
            dfs(des,adj,vis,valid);
            vis[src] = 2;
            st.pop_back();
            fill(all(nxt),-1);
            for (int i = 0; i < sz(cycle); ++i) {
                nxt[cycle[(i+1) % sz(cycle)]] = cycle[i];
            }
        }
    }
    int main() {
    #ifndef ONLINE_JUDGE
        freopen("Input.txt","r",stdin);
        freopen("Output.txt","w",stdout);
    #endif
        fast;
        int t = 1;
        //cin >> t;
        while (t--)
            solve();
        return 0;
    
    }
