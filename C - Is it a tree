#define fast std::ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> iv;
typedef vector<ll> llv;
#define el "\n"
#define all(x) (x).begin(),(x).end()
#define sz(s) (int)(s).size()
const int N = 201;
const int mod = 1000000007;
vector<bool> visited;
vector<bool> color;
vector<vector<int>> adj;
stack<int> ans;
int n,m;
/********************************************************************/
bool cycle = 0;
void dfs(int node,int parent){
    visited[node] = 1;
    for (auto &i : adj[node]) {
        if(!visited[i])
            dfs(i,node);
        else if(parent != i){
            cycle = true;
            return;
        }
    }
}
void solve() {
    //graph is tree if and only if it has no cycle and every node is connected to the tree
    cin >> n>>m;
    if (n == 0 && m == 0)
        return;
    visited = vector<bool>(n+1);
    adj = vector<vector<int>>(n+1);
    for (int i = 0; i < m; ++i) {
        int l, r;
        cin >> l >> r;
        adj[l].emplace_back(r);
        if(l != r) adj[r].emplace_back(l);
    }
    bool connected = true;
    for (int i = 1; i <= n ; ++i) {
        if(!visited[i])
            dfs(i,-1);
        if(cycle || adj[i].size() < 1){
            connected = false;
            break;
        }
    }
    if(cycle || !connected){
        cout<<"NO"<<el;
    }
    else cout<<"YES"<<el;
}

int main() {
#ifndef ONLINE_JUDGE
    freopen("Input.txt","r",stdin);
    freopen("Output.txt","w",stdout);
#endif
    fast;
    int t = 1;
    //cin >> t;
    while (t--)
        solve();
    return 0;
}
